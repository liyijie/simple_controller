require 'swagger_helper'

RSpec.describe '<%= controller_path %>', type: :request, capture_examples: true, tags: ["<%= controller_class_path.join(' ') %>"] do
  <%= resource_singular %>_ref = {
    type: :object, properties: {
      <%= resource_singular %>: {
        type: :object, properties: {
  <%- if resource_class.respond_to?(:columns_hash) && resource_class&.columns_hash.present? -%>
  <%- resource_class.respond_to?(:columns_hash) && resource_class.columns_hash.except('id', 'created_at', 'updated_at').values.each do |column| -%>
          <%= column.name %>: { type: :<%= column.type %>, description: '<%= column&.comment %>' },
  <%- end -%>
  <%- end -%>
        }
      }
    }
  }
  <%= resource_singular %>_value = FactoryBot.attributes_for(:<%= resource_singular %>)

  before :each do
<% if auth.present? -%>
    @<%= auth_singular %> = <%= auth %>.register "<%= auth_singular %>", "password"
    @<%= auth_singular %>_token = <%= auth %>.login "<%= auth_singular %>", "password"
<% end -%>
    @<%= resource_singular %>_count = 5
    @<%= resource_plural %> = FactoryBot.create_list(:<%= resource_singular %>, @<%= resource_singular %>_count)
  end

<% @routes.each do | template, path_item | -%>
  path '<%= template %>' do
<% if auth.present? -%>
    parameter '<%= auth %>-Token', in: :header ,type: :string
    let('<%= auth %>-Token') { @<%= auth_singular %>_token.token }
<% end -%>
<% unless path_item[:params].empty? -%>
<% path_item[:params].each do |param| -%>
    parameter '<%= param %>', in: :path, type: :string
<% end -%>
<% path_item[:params].each do |param| -%>
<% if param == 'id' -%>
    let(:<%= param %>) { @<%= resource_plural %>.first.id }
<% elsif param.end_with? '_id' -%>
<%  model_name = param.sub('_id', '') -%>
    let(:<%= param %>) { @<%= model_name %>.id }
<% end -%>
<% end -%>

<% end -%>
<% path_item[:actions].each do | action, details | -%>
<% next if action == 'put' -%>
    <%= action %>(summary: '<%= details[:summary] %>') do
      produces 'application/json'
      consumes 'application/json'

<% if ['post', 'patch'].include? action -%>
      parameter :<%= resource_singular %>, in: :body, schema: <%=
resource_singular %>_ref
      let(:<%= resource_singular %>) do
        { <%= resource_singular %>: <%= resource_singular %>_value }
      end
<% end -%>
      response(<%= response_status action %>, description: 'successful') do
<% if details[:summary].start_with?("create") -%>
        it {
          body = JSON.parse(response.body)
<% attributes_names.each do |attr| -%>
          expect(body['<%= attr %>']).to eq <%= resource_singular %>_value[:<%= attr %>]
<% end -%>
        }
<% elsif details[:summary].start_with?("list") -%>
        it {
          body = JSON.parse(response.body)
          expect(body['<%= resource_plural %>'].count).to eq @<%= resource_singular %>_count
        }
<% elsif details[:summary].start_with?("delete") -%>
        it {
          expect(<%= resource_class %>.count).to eq(@<%= resource_singular %>_count-1)
        }
<% elsif details[:summary].start_with?("show") -%>
        it {
          body = JSON.parse(response.body)
          <%= resource_singular %> = @<%= resource_plural %>.first
<% attributes_names.each do |attr| -%>
          expect(body['<%= attr %>']).to eq <%= resource_singular %>.<%= attr %>
<% end -%>
        }
<% end -%>
      end
    end
<% end -%>
  end
<% end -%>
end
